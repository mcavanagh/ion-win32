#foreign(header = "<windows.h>")

import libc { va_list }

@foreign typedef CHAR       = char;
@foreign typedef SHORT      = short;
@foreign typedef LONG       = long;
@foreign typedef INT        = int;
@foreign typedef UINT       = uint;
@foreign typedef PUINT      = uint*;
@foreign typedef WPARAM     = UINT_PTR;
@foreign typedef LPARAM     = LONG_PTR;
@foreign typedef LRESULT    = LONG_PTR;
@foreign typedef HANDLE     = void*;
@foreign typedef DWORD      = ulong;
@foreign typedef BOOL       = int;
@foreign typedef BYTE       = uchar;
@foreign typedef WORD       = ushort;
@foreign typedef FLOAT      = float;
@foreign typedef PFLOAT     = FLOAT*;
@foreign typedef PBOOL      = BOOL*;
@foreign typedef LPBOOL     = BOOL*;
@foreign typedef PBYTE      = BYTE*;
@foreign typedef LPBYTE     = BYTE*;
@foreign typedef PINT       = int*;
@foreign typedef LPINT      = int*;
@foreign typedef PWORD      = WORD*;
@foreign typedef LPWORD     = WORD*;
@foreign typedef LPLONG     = long*;
@foreign typedef PDWORD     = DWORD*;
@foreign typedef LPDWORD    = DWORD*;
@foreign typedef LPVOID     = void*;
@foreign typedef LPCVOID    = void const*;
@foreign typedef WCHAR      = wchar;
@foreign typedef SIZE_T     = ULONG_PTR;
@foreign typedef PSIZE_T    = ULONG_PTR*;
@foreign typedef SSIZE_T    = LONG_PTR;
@foreign typedef PSSIZE_T   = LONG_PTR*;
@foreign typedef LONGLONG   = int64;
@foreign typedef ULONGLONG  = uint64;

@foreign
struct HINSTANCE__
{
    unused: int;
}
@foreign typedef HINSTANCE = HINSTANCE__*;
@foreign typedef HMODULE   = HINSTANCE;
@foreign typedef HRESULT   = long;

//
// ANSI (Multi-byte Character) types
//
@foreign typedef PCHAR      = CHAR*;
@foreign typedef LPCH       = CHAR*;
@foreign typedef PCH        = CHAR*;
@foreign typedef LPCCH      = CHAR const*;
@foreign typedef PCCH       = CHAR const*;
@foreign typedef NPSTR      = CHAR*;
@foreign typedef LPSTR      = CHAR*;
@foreign typedef PSTR       = CHAR*;
@foreign typedef PZPSTR     = PSTR*;
@foreign typedef PCZPSTR    = PSTR const*;
@foreign typedef LPCSTR     = CHAR const*;
@foreign typedef PCSTR      = CHAR const*;
@foreign typedef PZPCSTR    = PCSTR*;
@foreign typedef PCZPCSTR   = PCSTR const*;
@foreign typedef PZZSTR     = CHAR*;
@foreign typedef PCZZSTR    = CHAR const*;
@foreign typedef PNZCH      = CHAR*;
@foreign typedef PCNZCH     = CHAR const*;

@foreign typedef TCHAR      = char;
@foreign typedef PTCHAR     = char*;
@foreign typedef TBYTE      = uchar;
@foreign typedef PTBYTE     = uchar*;

@foreign typedef LPTCH      = LPCH;
@foreign typedef PTCH       = LPCH;
@foreign typedef LPCTCH     = LPCCH;
@foreign typedef PCTCH      = LPCCH;
@foreign typedef PTSTR      = LPSTR;
@foreign typedef LPTSTR     = LPSTR;
@foreign typedef PUTSTR     = LPSTR;
@foreign typedef LPUTSTR    = LPSTR;
@foreign typedef PCTSTR     = LPCSTR;
@foreign typedef LPCTSTR    = LPCSTR;
@foreign typedef PCUTSTR    = LPCSTR;
@foreign typedef LPCUTSTR   = LPCSTR;
@foreign typedef PZZTSTR    = PZZSTR;
@foreign typedef PUZZTSTR   = PZZSTR;
@foreign typedef PCZZTSTR   = PCZZSTR;
@foreign typedef PCUZZTSTR  = PCZZSTR;
@foreign typedef PZPTSTR    = PZPSTR;
@foreign typedef PNZTCH     = PNZCH;
@foreign typedef PUNZTCH    = PNZCH;
@foreign typedef PCNZTCH    = PCNZCH;
@foreign typedef PCUNZTCH   = PCNZCH;

@foreign("FormatMessageA")
func FormatMessage(dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD,
  dwLanguageId: DWORD, lpBuffer: LPTSTR, nSize: DWORD, Arguments: va_list*): DWORD;

@foreign
func MAKELANGID(p: WORD, s: WORD): WORD;

@foreign
func GetLastError(): DWORD;

@foreign
func GetStdHandle(nStdHandle: DWORD): HANDLE;

@foreign
func SetStdHandle(nStdHandle: DWORD,  hHandle: HANDLE): BOOL;

@foreign
struct SECURITY_ATTRIBUTES {
    nLength: DWORD;
    lpSecurityDescriptor: LPVOID;
    bInheritHandle: BOOL;
}

@foreign typedef PSECURITY_ATTRIBUTES  = SECURITY_ATTRIBUTES*;
@foreign typedef LPSECURITY_ATTRIBUTES = SECURITY_ATTRIBUTES*;

@foreign const DELETE                   = 0x00010000L;
@foreign const READ_CONTROL             = 0x00020000L;
@foreign const WRITE_DAC                = 0x00040000L;
@foreign const WRITE_OWNER              = 0x00080000L;
@foreign const SYNCHRONIZE              = 0x00100000L;
@foreign const STANDARD_RIGHTS_REQUIRED = 0x000F0000L;
@foreign const STANDARD_RIGHTS_READ     = READ_CONTROL;
@foreign const STANDARD_RIGHTS_WRITE    = READ_CONTROL;
@foreign const STANDARD_RIGHTS_EXECUTE  = READ_CONTROL;
@foreign const STANDARD_RIGHTS_ALL      = 0x001F0000L;
@foreign const SPECIFIC_RIGHTS_ALL      = 0x0000FFFFL;

@foreign const GENERIC_READ    = long(0x80000000);
@foreign const GENERIC_WRITE   = long(0x40000000);
@foreign const GENERIC_EXECUTE = long(0x20000000);
@foreign const GENERIC_ALL     = long(0x10000000);

@foreign const CONSOLE_TEXTMODE_BUFFER = 1;

@foreign const ENABLE_PROCESSED_OUTPUT              = 0x0001;
@foreign const ENABLE_WRAP_AT_EOL_OUTPUT            = 0x0002;
@foreign const ENABLE_VIRTUAL_TERMINAL_PROCESSING   = 0x0004;
@foreign const DISABLE_NEWLINE_AUTO_RETURN          = 0x0008;
@foreign const ENABLE_LVB_GRID_WORLDWIDE            = 0x0010;

@foreign const STD_INPUT_HANDLE     = DWORD(-10);
@foreign const STD_OUTPUT_HANDLE    = DWORD(-11);
@foreign const STD_ERROR_HANDLE     = DWORD(-12);

@foreign const FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100;
@foreign const FORMAT_MESSAGE_IGNORE_INSERTS  = 0x00000200;
@foreign const FORMAT_MESSAGE_FROM_STRING     = 0x00000400;
@foreign const FORMAT_MESSAGE_FROM_HMODULE    = 0x00000800;
@foreign const FORMAT_MESSAGE_FROM_SYSTEM     = 0x00001000;
@foreign const FORMAT_MESSAGE_ARGUMENT_ARRAY  = 0x00002000;
@foreign const FORMAT_MESSAGE_MAX_WIDTH_MASK  = 0x000000FF;

@foreign const LANG_NEUTRAL   = 0x00;
@foreign const LANG_INVARIANT = 0x7f;

@foreign const SUBLANG_NEUTRAL            = 0x00;
@foreign const SUBLANG_DEFAULT            = 0x01;
@foreign const SUBLANG_SYS_DEFAULT        = 0x02;
@foreign const SUBLANG_CUSTOM_DEFAULT     = 0x03;
@foreign const SUBLANG_CUSTOM_UNSPECIFIED = 0x04;
@foreign const SUBLANG_UI_CUSTOM_DEFAULT  = 0x05;

@foreign
struct OVERLAPPED_INNER2 {
    Offset: DWORD;
    OffsetHigh: DWORD;
}

@foreign
union OVERLAPPED_INNER1 {
    dummy: OVERLAPPED_INNER2;
    Pointer: PVOID;
}

@foreign
struct OVERLAPPED {
    Internal: ULONG_PTR;
    InternalHigh: ULONG_PTR;
    dummy: OVERLAPPED_INNER1;
    hEvent: HANDLE;
}
@foreign typedef LPOVERLAPPED = OVERLAPPED*;

@foreign("LoadLibraryA")
func LoadLibrary(lpLibFileName: LPCSTR): HMODULE;

@foreign
func GetProcAddress(hModule: HMODULE, lpProcName: LPCSTR): FARPROC;

@foreign
func Sleep(dwMilliseconds: DWORD);

@foreign
func CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE,
    lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD): HANDLE;

@foreign const INFINITE = 0xFFFFFFFF;

@foreign
func WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD): DWORD;

@foreign
func WaitForMultipleObjects(nCount: DWORD, lpHandles: HANDLE const*, bWaitAll: BOOL, dwMilliseconds: DWORD): DWORD;

@foreign typedef PTHREAD_START_ROUTINE  = func(lpThreadParameter: LPVOID): DWORD;
@foreign typedef LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE;