@foreign
typedef SRWLOCK = RTL_SRWLOCK;

@foreign
typedef PSRWLOCK = RTL_SRWLOCK*;

@foreign
func InitializeSRWLock(SRWLock: PSRWLOCK);

@foreign
func ReleaseSRWLockExclusive(SRWLock: PSRWLOCK);

@foreign
func ReleaseSRWLockShared(SRWLock: PSRWLOCK);

@foreign
func AcquireSRWLockExclusive(SRWLock: PSRWLOCK);

@foreign
func AcquireSRWLockShared(SRWLock: PSRWLOCK);

@foreign
func TryAcquireSRWLockExclusive(SRWLock: PSRWLOCK): BOOLEAN;

@foreign
func TryAcquireSRWLockShared(SRWLock: PSRWLOCK): BOOLEAN;

@foreign
func InitializeCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);

@foreign
func EnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);

@foreign
func LeaveCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);

@foreign
func InitializeCriticalSectionAndSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD): BOOL;

@foreign
func InitializeCriticalSectionEx(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD, Flags: DWORD): BOOL;

@foreign
func SetCriticalSectionSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD): DWORD;

@foreign
func TryEnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION): BOOL;

@foreign
func DeleteCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);

@foreign
typedef INIT_ONCE = RTL_RUN_ONCE;

@foreign
typedef PINIT_ONCE = PRTL_RUN_ONCE;

@foreign
typedef LPINIT_ONCE = PRTL_RUN_ONCE;

@foreign
typedef PINIT_ONCE_FN = func(InitOnce: PINIT_ONCE, Parameter: PVOID, Context: PVOID*): BOOL;

@foreign
func InitOnceInitialize(InitOnce: PINIT_ONCE);

@foreign
func InitOnceExecuteOnce(InitOnce: PINIT_ONCE, InitFn: PINIT_ONCE_FN, Parameter: PVOID, Context: LPVOID*): BOOL;

@foreign
func InitOnceBeginInitialize(lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, fPending: PBOOL, lpContext: LPVOID*): BOOL;

@foreign
func InitOnceComplete(lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, lpContext: LPVOID): BOOL;

@foreign
typedef CONDITION_VARIABLE = RTL_CONDITION_VARIABLE;

@foreign
typedef PCONDITION_VARIABLE = RTL_CONDITION_VARIABLE*;

@foreign
func InitializeConditionVariable(ConditionVariable: PCONDITION_VARIABLE);

@foreign
func WakeConditionVariable(ConditionVariable: PCONDITION_VARIABLE);

@foreign
func WakeAllConditionVariable(ConditionVariable: PCONDITION_VARIABLE);

@foreign
func SleepConditionVariableCS(ConditionVariable: PCONDITION_VARIABLE, CriticalSection: PCRITICAL_SECTION, dwMilliseconds: DWORD): BOOL;

@foreign
func SleepConditionVariableSRW(ConditionVariable: PCONDITION_VARIABLE, SRWLock: PSRWLOCK, dwMilliseconds: DWORD, Flags: ULONG): BOOL;

@foreign
func SetEvent(hEvent: HANDLE): BOOL;

@foreign
func ResetEvent(hEvent: HANDLE): BOOL;

@foreign
func ReleaseSemaphore(hSemaphore: HANDLE, lReleaseCount: LONG, lpPreviousCount: LPLONG): BOOL;

@foreign
func ReleaseMutex(hMutex: HANDLE): BOOL;

@foreign
func WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD): DWORD;

@foreign
func SleepEx(dwMilliseconds: DWORD, bAlertable: BOOL): DWORD;

@foreign
func WaitForSingleObjectEx(hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL): DWORD;

@foreign
func WaitForMultipleObjectsEx(nCount: DWORD, lpHandles: HANDLE*, bWaitAll: BOOL, dwMilliseconds: DWORD, bAlertable: BOOL): DWORD;

@foreign
func CreateMutexA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCSTR): HANDLE;

@foreign
func CreateMutex(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCSTR): HANDLE;

@foreign
func CreateMutexW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCWSTR): HANDLE;

@foreign
func OpenMutexW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR): HANDLE;

@foreign
func CreateEventA(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCSTR): HANDLE;

@foreign
func CreateEvent(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCSTR): HANDLE;

@foreign
func CreateEventW(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCWSTR): HANDLE;

@foreign
func OpenEventA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR): HANDLE;

@foreign
func OpenEvent(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR): HANDLE;

@foreign
func OpenEventW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR): HANDLE;

@foreign
func OpenSemaphoreW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR): HANDLE;

@foreign
typedef PTIMERAPCROUTINE = func(lpArgToCompletionRoutine: LPVOID, dwTimerLowValue: DWORD, dwTimerHighValue: DWORD);

@foreign
func OpenWaitableTimerW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCWSTR): HANDLE;

@foreign
func SetWaitableTimerEx(hTimer: HANDLE, lpDueTime: LARGE_INTEGER*, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, WakeContext: PREASON_CONTEXT, TolerableDelay: ULONG): BOOL;

@foreign
func SetWaitableTimer(hTimer: HANDLE, lpDueTime: LARGE_INTEGER*, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, fResume: BOOL): BOOL;

@foreign
func CancelWaitableTimer(hTimer: HANDLE): BOOL;

@foreign
func CreateMutexExA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
func CreateMutexEx(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
func CreateMutexExW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
func CreateEventExA(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
func CreateEventEx(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
func CreateEventExW(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
func CreateSemaphoreExW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
func CreateWaitableTimerExW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD): HANDLE;

@foreign
typedef SYNCHRONIZATION_BARRIER = RTL_BARRIER;

@foreign
typedef PSYNCHRONIZATION_BARRIER = PRTL_BARRIER;

@foreign
typedef LPSYNCHRONIZATION_BARRIER = PRTL_BARRIER;

@foreign
func EnterSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, dwFlags: DWORD): BOOL;

@foreign
func InitializeSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, lTotalThreads: LONG, lSpinCount: LONG): BOOL;

@foreign
func DeleteSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER): BOOL;

@foreign
func Sleep(dwMilliseconds: DWORD);

@foreign
func WaitOnAddress(Address: void*, CompareAddress: PVOID, AddressSize: SIZE_T, dwMilliseconds: DWORD): BOOL;

@foreign
func WakeByAddressSingle(Address: PVOID);

@foreign
func WakeByAddressAll(Address: PVOID);

@foreign
func SignalObjectAndWait(hObjectToSignal: HANDLE, hObjectToWaitOn: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL): DWORD;

@foreign
func WaitForMultipleObjects(nCount: DWORD, lpHandles: HANDLE*, bWaitAll: BOOL, dwMilliseconds: DWORD): DWORD;

@foreign
func CreateSemaphoreW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR): HANDLE;

@foreign
func CreateWaitableTimerW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCWSTR): HANDLE;

